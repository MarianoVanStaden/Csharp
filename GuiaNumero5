//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace ConsoleApp1
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            Console.WriteLine("Ingrese el nùmero del tipo de figura que  quiere calcular (cuadrado = 1, triangulo = 2, rectangulo =3)");
//            int tipo = Convert.ToInt32(Console.ReadLine());
//            Console.WriteLine($"El área de la figura es: {CalcularArea(tipo)}");
//            Console.WriteLine("Fin del programa");
//            Console.ReadKey();
//        }

//        static double CalcularArea(int tipo)
//        {
//            Console.WriteLine("Ingrese la base de su figura");
//            double lado1 = Convert.ToDouble(Console.ReadLine());
//            double lado2 = 0;
//            if (tipo != 1)
//            {
//                Console.WriteLine("Ingrese la altura de su figura");
//                lado2 = Convert.ToDouble(Console.ReadLine());
//            }
//            switch (tipo)
//            {
//                case 1:
//                    {
//                        return Math.Pow(lado1, 2);
//                        break;
//                    }
//                case 2:
//                    {
//                        return (lado1 * lado2) / 2;
//                        break;
//                    }
//                case 3:
//                    {
//                        return lado1 * lado2;
//                        break;
//                    }
//                default: return 0;

//            }
//        }
//    }
//}

#region GuiaNúmero5
#region Ejercicio N°1 26/05/2023
////1) Realizar distintos métodos que reciba cómo parámetro dos números reales y realicen
////lo siguiente:
////a) Calcule la sustracción de ambos números en valor absoluto.
////b) Calcule el promedio de dichos números.
////c) Devuelva el máximo de dichos números.
////d) Devuelva el mínimo de dichos números.
////e) Devuelva un mensaje indicando si el primer número es divisible por el
////segundo.

//int opcion;
//double x, y;
//Console.WriteLine("Ingrese el valor de A");
//x = int.Parse(Console.ReadLine());
//Console.WriteLine("Ingrese el valor de B");
//y = int.Parse(Console.ReadLine());
//Console.WriteLine("Selecciones una opción para operar a y b");
//opcion = int.Parse(Console.ReadLine());
//switch (opcion)
//{
//    case 1 : CalcularAbs(x, y);Console.WriteLine(CalcularAbs(x, y));break;
//    case 2 : CalcularPromedio(x,y);Console.WriteLine(CalcularPromedio(x, y)); break;
//    case 3 : DevolverMayor(x,y); Console.WriteLine(DevolverMayor(x, y)); break;
//    case 4 : DevolverMenor(x,y); Console.WriteLine(DevolverMenor(x, y)); break;
//    case 5:  DividirAporB(x,y); Console.WriteLine(DividirAporB(x, y)); break;


//}
//static double CalcularAbs(double a, double b)
//{
//    double resultado = 0; 
//    resultado=Math.Abs(a - b);
//    return resultado;
//}
//static double CalcularPromedio(double a, double b)
//{
//    double resultado = 0;
//    resultado = (a+b)/2;
//    return resultado;
//}
//static double DevolverMayor(double a, double b)
//{
//    if (a >= b) return a;
//    else return b;   
//}
//static double DevolverMenor(double a, double b)
//{
//    if (a >= b) return b;
//    else return a;
//}
//static string DividirAporB(double a, double b)
//{
//    string mensajePositivo = "A es divisible por B";
//    string mensajeNegativo = "A no es divisible por B";
//    if ((a % b) == 0) return mensajePositivo;
//    else return mensajeNegativo;
//}

#endregion
#region Ejercicio N°2 A 26/05/2023
//2) Codificar los siguientes ejercicios con métodos:
//a) Se desea conocer el impuesto a pagar según el total ganado en el año. Leer
//la ganancia anual (GANUAL) y mostrar el impuesto (IMPU) de acuerdo a la
//siguiente tabla:
//GANUAL < 100000 ……. IMPU = 0
//100000 <= GANUAL < 150000 …. IMPU = 2 % de(GANUAL - 100000)
//150000 <= GANUAL …. IMPU = 3000 + 5 % de(GANUAL - 150000)
//El cálculo del impuesto debe ser realizado en un método que reciba cómo
//parámetro la ganancia anual.
//double gananciaAnual;
//Console.WriteLine("Ingresar su ganancia anual");
//gananciaAnual = double.Parse(Console.ReadLine());
//Console.WriteLine($"Usted pagará {CalcularImpuesto(gananciaAnual)}$ de impuestos");
//Console.ReadKey();


//static double CalcularImpuesto(double salarioAnual)
//{
//    if (salarioAnual < 100000) return (salarioAnual*0);
//    else if (salarioAnual >= 100000 && salarioAnual < 150000) return (salarioAnual * 0.02);
//    else return (3000 + (0.05 * (salarioAnual - 150000)));
//}
#endregion
#region Ejercicio N°2 B 26/05/2023
//b) Leer número de libreta y tres notas (de tipo real) correspondiente a una
//materia, mostrar nro. de libreta y dos carteles indicando si aprobó o no y el
//concepto. Para aprobar se necesita un promedio de 5 puntos cómo mínimo.
//Con respecto al concepto: si obtiene 9 o más le corresponde Sobresaliente
//(S), menos de 9 y hasta 8 inclusive el concepto es Distinguido (D), menos de
//8 y hasta 6 es Bueno (B), menos de 6 y hasta 4 en Regular (R), menos de 4
//es Insuficiente (I).
//Desarrollar un método que reciba el promedio y devuelva una cadena con el
//concepto.

//try //El try catch va a evitar que se rompa el programa cuando ingresen simbolos o letras en lugar de números
//{
//    int numeroLibreta;
//    double nota1, nota2, nota3, promedio = 0;
//    Console.WriteLine("¡Hola alumno! Ingrese su número de libreta");
//    numeroLibreta = int.Parse(Console.ReadLine());
//    Console.WriteLine("Alumno, ingrese su primer calificación");
//    nota1 = int.Parse(Console.ReadLine());
//    Console.WriteLine("Alumno, ingrese su segunda calificación");
//    nota2 = int.Parse(Console.ReadLine());
//    Console.WriteLine("Alumno, ingrese su tercer calificación");
//    nota3 = int.Parse(Console.ReadLine());
//    promedio = (nota1 + nota2 + nota3) / 3;
//    Console.WriteLine($"Su número de libreta es la número: {numeroLibreta}");
//    Console.WriteLine(EvaluarConcepto(promedio));


//    static string EvaluarConcepto(double promedio)
//    { 
//    if (promedio >= 9)
//    {
//            return "Usted aprobó \n El concepto es: Sobresaliente";
//    }
//    else if (promedio >= 8 && promedio < 9)
//    {
//            return "Usted aprobó \n El concepto es: Distinguido";
//    }
//    else if (promedio >= 6 && promedio < 8)
//    {
//            return "Usted aprobó \n El concepto es: Bueno";
//    }
//    else if (promedio >= 4 && promedio < 6)
//    {
//            return "Usted aprobó \n El concepto es: Regular";
//    }
//    else 
//    {
//            return "Usted aprobó \n El concepto es: Insuficiente";
//    }
//    }

//    Console.ReadKey(); //evita que una vez que se muestren los resultados se cierre la consola
//}
//catch (FormatException) //el catch atrapa solo errores de formato
//{
//    Console.WriteLine("El dato ingresado tuvo un formato incorrecto, debe asignar coeficientes");

//}
#endregion
#region Ejercicio N°2 B 26/05/2023
//c) Se lee un conjunto de números positivos (el último es negativo). Se pide
//evaluar y mostrar para cada valor ingresado, el valor de y siendo y = x + x/2 + 4
//Desarrollar un método para hallar el valor de y.

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace GuiaNumero5
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            double numeroIngresado;
//            Console.WriteLine("Ingrese números para la fòrmula  y = x + x/2 + 4; ingrese un número negativo para finalizar");
//            numeroIngresado = double.Parse(Console.ReadLine());
//            HallarValorY(numeroIngresado);
//            Console.WriteLine("Fin del programa");
//            Console.ReadKey();

//        }
//        static void HallarValorY(double numero)
//        {
//            do
//            {

//                double valorY = numero + numero / 2 + 4;
//                Console.WriteLine($" El valor de Y es igual a: {valorY}");
//                Console.WriteLine("Ingrese números para la fòrmula  y = x + x/2 + 4; ingrese un número negativo para finalizar");
//                numero = double.Parse(Console.ReadLine());

//            } while (numero >= 0);
//        }
//    }
//}





#endregion
#region Ejercicio N°3 A 26/05/2023

//3)
//a) Desarrollar un método que reciba cómo entrada las longitudes A, B, C, D
//correspondientes a los lados de un cuadrilátero y devuelva su clasificación:
//cuadrado: 4 lados iguales
//rectángulo: 2 pares de lados iguales
//trapecio: 2 lados iguales y 2 lados distintos entre sí
//romboide: 4 lados distintos
//Introducción a la programación
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace GuiaNumero5
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {


//            Console.WriteLine(CalcularTipo());
//            Console.ReadKey();

//        }
//        static string CalcularTipo()
//        {

//                double ladoA, ladoB, ladoC, ladoD;
//                Console.WriteLine("Ingrese la medida del primer lado");
//                ladoA = double.Parse(Console.ReadLine());
//                Console.WriteLine("Ingrese la medida del segundo lado");
//                ladoB = double.Parse(Console.ReadLine());
//                Console.WriteLine("Ingrese la medida del tercer lado");
//                ladoC = double.Parse(Console.ReadLine());
//                Console.WriteLine("Ingrese la medida del cuarto lado");
//                ladoD = double.Parse(Console.ReadLine());
//                 if (ladoA == ladoB && ladoB == ladoC && ladoC == ladoD) return "El cuadrilatero es un cuadrado";
//                 else if ((ladoA == ladoB && ladoC == ladoD) || (ladoA == ladoC && ladoB == ladoD) || (ladoA == ladoD && ladoB == ladoC)) return "El cuadrilatero es un rectangulo";
//                 else if ((ladoA == ladoB && ladoC != ladoD) || (ladoA == ladoC && ladoB != ladoD) || (ladoA == ladoD && ladoB != ladoC) || (ladoB == ladoC && ladoA != ladoD) || (ladoB == ladoD && ladoA != ladoC) || (ladoC == ladoD && ladoA != ladoB)) return "El cuadrilatero es un trapecio";
//                 else return "El cuadrilatero es un romboide";
//        }
//    }
//}
#endregion
#region Ejercicio N°3 B 26 / 05/2023
////b) Utilizar el método definido en a) en un programa que resuelva el siguiente
////problema: Ingresar las medidas de los 4 lados de N cuadriláteros. Hallar y
////mostrar:
////i) Porcentaje de cuadrados con respecto a la cantidad de cuadriláteros
////que tienen al menos 2 lados iguales.
////ii) Para cuál de las clases de cuadriláteros se ingresó la menor cantidad
////de datos: rectángulo, trapecio o romboide.
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace GuiaNumero5
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            int cantidad, cuadrado=0, rectangulo = 0, trapecio = 0, romboide = 0;
//            string resultado;
//            Console.WriteLine("Ingrese la cantidad de cuadrilateros que va a ingresar");
//            cantidad = int.Parse(Console.ReadLine());
//            for (int i=0; i<cantidad; i++)
//            {
//                resultado = CalcularTipo();
//                Console.WriteLine($"El cuadrilatero es un {resultado}");
//                if (resultado == "cuadrado") cuadrado++;
//                else if (resultado == "rectangulo") rectangulo++;
//                else if (resultado == "trapecio") trapecio++;
//                else romboide++;
//            }
//            Console.WriteLine($"Porcentaje de cuadrados con respecto a la cantidad de cuadriláteros que tienen al menos 2 lados iguales es del {CalcularCuadrados(cuadrado, rectangulo, trapecio)}%");
//            Console.WriteLine(CalcularMenor(rectangulo, trapecio, romboide));
//            Console.ReadKey();

//        }
//        static string CalcularTipo()
//        {

//            double ladoA, ladoB, ladoC, ladoD;
//            Console.WriteLine("Ingrese la medida del primer lado");
//            ladoA = double.Parse(Console.ReadLine());
//            Console.WriteLine("Ingrese la medida del segundo lado");
//            ladoB = double.Parse(Console.ReadLine());
//            Console.WriteLine("Ingrese la medida del tercer lado");
//            ladoC = double.Parse(Console.ReadLine());
//            Console.WriteLine("Ingrese la medida del cuarto lado");
//            ladoD = double.Parse(Console.ReadLine());
//            if (ladoA == ladoB && ladoB == ladoC && ladoC == ladoD) return "cuadrado";
//            else if ((ladoA == ladoB && ladoC == ladoD) || (ladoA == ladoC && ladoB == ladoD) || (ladoA == ladoD && ladoB == ladoC)) return "rectangulo";
//            else if ((ladoA == ladoB && ladoC != ladoD) || (ladoA == ladoC && ladoB != ladoD) || (ladoA == ladoD && ladoB != ladoC) || (ladoB == ladoC && ladoA != ladoD) || (ladoB == ladoD && ladoA != ladoC) || (ladoC == ladoD && ladoA != ladoB)) return "trapecio";
//            else return "romboide";
//        }
//        static double CalcularCuadrados(double cuadrado, double rectangulo, double trapecio)
//        {
//            double totalDosLados = cuadrado+rectangulo+trapecio;
//            double porcentajeCuadrados = cuadrado * 100 / totalDosLados;
//            return porcentajeCuadrados;
//        }
//        static string CalcularMenor(double rectangulo, double trapecio, double romboide)
//        {
//            Console.WriteLine($"rectangulo, trapecio, romboide {rectangulo}, {trapecio}, {romboide}");
//            if (rectangulo == trapecio && rectangulo == romboide) return "La cantidad es la misma";
//            else if (rectangulo == trapecio && rectangulo < romboide && rectangulo!=0 && romboide!=0) return "La cantidad de rectangulos y trapecios es menor";
//            else if (rectangulo == romboide && rectangulo < trapecio && rectangulo != 0 && romboide != 0) return "La cantidad de rectangulos y romboides es menor";
//            else if (romboide == trapecio && romboide < rectangulo && romboide != 0 && trapecio != 0) return "La cantidad de romboides y trapecios es menor";
//            else if (trapecio < rectangulo && trapecio < romboide && rectangulo != 0 && romboide != 0 && trapecio != 0) return "La cantidad de trapecios es menor";
//            else if (rectangulo < trapecio && rectangulo < romboide && rectangulo != 0 && romboide != 0 && trapecio != 0) return "La cantidad de rectangulos es menor";
//            else if (romboide < trapecio && romboide < rectangulo && rectangulo != 0 && romboide != 0 && trapecio != 0) return "La cantidad de romboides es menor";
//            else if (rectangulo == trapecio && rectangulo != 0) return "La cantidad de rectangulos y trapecios es menor";
//            else if (rectangulo == romboide && rectangulo != 0) return "La cantidad de rectangulos y romboides es menor";
//            else if (romboide == trapecio && romboide != 0) return "La cantidad de romboides y trapecios es menor";
//            else if (rectangulo != 0 && romboide == 0 && trapecio == 0) return "La cantidad de rectangulos es menor";
//            else if (romboide != 0 && rectangulo == 0 && trapecio == 0) return "La cantidad de rectangulos es menor";
//            else if (trapecio != 0 && romboide == 0 && rectangulo == 0) return "La cantidad de rectangulos es menor";
//            else return "Se fue del bucle";
//        }
//    }
//}
#endregion
#region Ejercicio N°4 26 / 05/2023
//4) Leer un conjunto de números enteros. Se deberá calcular el factorial de los números
//no negativos. Detener el proceso cuando se hayan calculado 4 factoriales o cuando
//el factorial calculado sea mayor a 5000.
//(0! = 1; 1! = 1; 2! = 2 * 1; 3! = 3 * 2 * 1; … ; n! = n * (n - 1) * (n - 2) * (n - 3) * ...*1)
//Desarrollar un método para el cálculo del Factorial

//using System;

//namespace GuiaNumero5
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            int
//                num, resultado = 0;
//            for (int i = 0; i < 4 && resultado < 5000; i++)
//            {
//                Console.WriteLine("Ingrese el número para calcular su factorial");
//                num = int.Parse(Console.ReadLine());
//                resultado = CalcularFactorial(num);
//                Console.WriteLine($"El {i + 1}° factorial fue : {resultado}");
//            }
//            Console.ReadKey();

//        }
//        static int CalcularFactorial(int num)
//        {
//            int factorial = 1;
//            for (int i = 1; i <= num; i++)
//            {
//                factorial *= i;
//            }
//            return factorial;
//        }

//    }
//}


#endregion
#region Ejercicio N°5 27 / 05/2023
//5) Desarrollar un método que reciba por parámetro una palabra y devuelva si la misma
//es o no palíndromo (capicúa). No discriminar entre mayúsculas y minúsculas.
//Ejemplo: ANa, AnaNA son palíndromos (se leen igual de izquierda a derecha).

//using System;

//namespace GuiaNumero5
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            string palabra;
//            Console.WriteLine("Ingrese una palabra para ver si es o no una palabra palíndroma");
//            palabra = (Console.ReadLine()).ToLower();
//            Console.WriteLine($"La palabra {CompararPalabras(palabra)}");

//        }
//        static string CompararPalabras(string palabra)
//        {
//            char[] chars = palabra.ToCharArray();
//            Array.Reverse(chars);
//            string palabraInvertida = new string(chars);
//            Console.WriteLine(palabraInvertida);
//            if (palabra == palabraInvertida) return "es palíndroma";
//            else return "no es palíndroma";
//        }

//    }
//}


#endregion
#region Ejercicio N°6 27 / 05/2023
//6) Desarrollar un método que reciba por parámetro dos números reales positivos y
//devuelva una cadena con la intercalación de las cifras de ambos números (si el
//número es decimal, solo contemplar la parte entera).
//Ejemplo: número 1 = 12.5 y numero2 = 4567 → “142567”

//using System;

//namespace GuiaNumero5
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            double numeroA, numeroB;
//            Console.WriteLine("Ingrese el primer número");
//            numeroA = (int)Convert.ToDouble(Console.ReadLine());
//            Console.WriteLine("Ingrese el segundo número");
//            numeroB = (int)Convert.ToDouble(Console.ReadLine());
//            Console.WriteLine(numeroA);
//            Console.WriteLine(numeroB);
//            Console.ReadKey();
//            Console.WriteLine($"El nùmero final es: {IntercalarNumeros(numeroA, numeroB)}");

//        }
//        static int IntercalarNumeros(double num1, double num2)
//        {
//            string cadena1 = num1.ToString();
//            string cadena2 = num2.ToString();
//            string intercalacion = "";
//            int longitud = Math.Max(cadena1.Length, cadena2.Length);
//            for (int i=0; i<longitud;i++)
//            {
//                if (i < cadena1.Length) intercalacion += cadena1[i];
//                if (i < cadena2.Length) intercalacion += cadena2[i];
//            }
//            int numeroFinal = Convert.ToInt32(intercalacion);
//            return numeroFinal;
//        }

//    }
//}


#endregion
#region Ejercicio N°7 A 27 / 05/2023
//7) Codificar utilizando métodos:
//a) Desarrollar un método que tenga dos parámetros enteros: el número base y
//un número exponente y que devuelva la operación potenciación (no utilizar la
//librería Math).
//Nota: considerar que el exponente es mayo o igual a cero.


//using System;

//namespace GuiaNumero5
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {

//            int numeroBase;
//            int numeroExponente;
//            Console.WriteLine("Ingrese el nùmero base (debe ser entero)");
//            numeroBase= Convert.ToInt32(Console.ReadLine());
//            Console.WriteLine("Ingrese el exponente (deber ser entero y mayor o igual a cero");
//            numeroExponente = Convert.ToInt32(Console.ReadLine());
//            Console.WriteLine(numeroBase);
//            Console.WriteLine(numeroExponente);
//            Console.ReadKey();
//            Console.WriteLine($"El resultado final es: {CalcularPotencia(numeroBase, numeroExponente)}");

//        }
//        static int CalcularPotencia(int numBase, int numExpo)
//        {
//            int resultado = numBase;
//            if (numExpo == 0) resultado = 1;
//            else for (int i = 1; i < numExpo; i++) resultado *= numBase;
//            return resultado;
//        }

//    }
//}


#endregion
#region Ejercicio N°7 B 27 / 05/2023
//b) Mejorar el ejercicio anterior, permitiendo que el exponente puede ser
//negativo.


//using System;

//namespace GuiaNumero5
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {

//            int numeroBase;
//            int numeroExponente;
//            Console.WriteLine("Ingrese el nùmero base (debe ser entero)");
//            numeroBase = Convert.ToInt32(Console.ReadLine());
//            Console.WriteLine("Ingrese el exponente (deber ser entero)");
//            numeroExponente = Convert.ToInt32(Console.ReadLine());
//            Console.ReadKey();
//            Console.WriteLine($"El resultado final es: {CalcularPotencia(numeroBase, numeroExponente)}");

//        }
//        static double CalcularPotencia(double numBase, double numExpo)
//        {
//            double resultado = numBase;
//            if (numExpo == 0) 
//            {
//                resultado = 1; 
//                return resultado; 
//            }
//            else if (numExpo < 0)
//            {
//                for (int i = 0; i > numExpo; i--)
//                {
//                    if (i == 0) resultado = (1 / numBase);
//                    else resultado *= (1 / numBase);
//                    Console.WriteLine(resultado);
//                }
//                return resultado;
//            }
//            else
//            {
//                for (int i = 1; i < numExpo; i++)
//                {
//                    resultado *= numBase;

//                }
//                return resultado;
//            }
//        }

//    }
//}
#endregion
#region Ejercicio N°7 C 27 / 05/2023
//c) Utilizar el método creado en b) para resolver el siguiente problema:
//Se quiere crear un método para transformar un número binario (que se pasa
//cómo parámetro) a decimal.
////Ejemplo: si se ingresa el número binario “1110001” deberá devolver 113

//using System;

//namespace GuiaNumero5
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {

//            int numeroDecimal;
//            Console.WriteLine("Ingrese el nùmero base (debe ser entero)");
//            numeroDecimal = Convert.ToInt32(Console.ReadLine());
//            Console.ReadKey();
//            Console.WriteLine($"El resultado final es: {ConvertToBinary(numeroDecimal)}");

//        }
//        static string ConvertToBinary(int numDec)
//        {
//            string resultado = "";
//            if (numDec == 0)
//            {
//                resultado = "0";

//            }
//            while (numDec > 0)
//            {
//                int resto = numDec % 2;

//                resultado = resto.ToString() + resultado;

//                numDec /= 2;
//            }
//            return resultado;
//        }

//    }
//}
#endregion
#region Ejercicio N°8 27 / 05/2023
//8) Leer tres caracteres y mostrarlos ordenados. Desarrollar un método que reciba los
//tres caracteres y los devuelva ordenados. El menor en el primer argumento y el
//mayor en el último.

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace GuiaNumero5
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {

//            char letra1, letra2, letra3;
//            Console.WriteLine("Ingrese la primer letra");
//            letra1 = Console.ReadKey().KeyChar;
//            Console.WriteLine();
//            Console.WriteLine("Ingrese la segunda letra ");
//            letra2 = Console.ReadKey().KeyChar;
//            Console.WriteLine();
//            Console.WriteLine("Ingrese la tercer letra");
//            letra3 = Console.ReadKey().KeyChar;
//            Console.WriteLine();
//            Console.WriteLine($"El resultado final es: {OrdenarLetras(letra1, letra2, letra3)}");

//        }
//        static string OrdenarLetras(char primera, char segunda, char tercera)
//        {
//            //var lista = new List<char> { primera, segunda, tercera };
//            //char menor = 'a';
//            //char medio ='a';
//            //char mayor = 'a' ;
//            //foreach (char elemento in lista)
//            //{
//            //    if (elemento == primera)
//            //    {
//            //        menor = primera;
//            //        medio = primera;
//            //        mayor = primera;
//            //    }
//            //    else if (elemento == segunda)
//            //    {
//            //        if (segunda > primera)
//            //        {
//            //            medio = segunda;
//            //            medio = tercera;
//            //        }
//            //        else
//            //        {
//            //            menor = segunda;
//            //            medio = primera;
//            //            mayor = primera;
//            //        }
//            //    }
//            //    else
//            //    {
//            //        if (elemento == tercera)
//            //        {
//            //            if (tercera < primera && tercera < segunda) menor = tercera;
//            //            else if (tercera < primera && tercera > segunda) medio = tercera;
//            //            else if (tercera > primera && tercera < segunda) medio = tercera;
//            //            else if (tercera > primera && tercera > segunda) mayor = tercera;
//            //        }

//            //    }
//            //}
//            //var resultado = new List<char> { menor, medio, mayor };
//            //Console.WriteLine(resultado);
//            //return resultado;
//            var lista = new List<char> { primera, segunda, tercera };
//            lista.Sort(); // Ordenar la lista de caracteres en orden ascendente
//            string prueba = string.Join(" ", lista); // Lo transformo en un string porque no me està leyendo el listado "lista"
//            return prueba;

//        }

//    }

//}


#endregion
#region Ejercicio N°9 27 / 05/2023
//9) Hacer un programa que mediante un menú de opciones permite resolver los
//siguientes puntos:
//OPCIÓN 1: Calcular y escribir cada uno de los términos de la serie (i -1) / i! para i
//(entero) desde 1 y hasta que el término calculado sea mayor que un dato k. Utilizar
//un procedimiento para el cálculo y escritura de los términos y una función para el
//factorial.
//OPCIÓN 2: Calcular y escribir las raíces de una ecuación de segundo grado
//(ax2+bx+c). Los coeficientes a, b y c son datos de entrada.
//OPCIÓN 3: Dado un círculo de centro X, punto del plano de coordenadas (x1, x2) y
//de radio R. Determinar si el punto P de coordenadas (p1, p2) está adentro o afuera
//del círculo.
//Ayuda: calcular la distancia de P a X y compara el resultado con R.
//El menú debe reiterarse hasta que el usuario decida finalizar.

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace ConsoleApp1
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            int tipo;
//            int k;

//            do
//            {
//                Console.WriteLine("Ingrese el nùmero de la operación a realizar (opción = 1, opción = 2, opción =3, salir=4)");
//                tipo = int.Parse(Console.ReadLine());
//                switch (tipo)
//                {
//                    case 1:
//                        {
//                            Console.WriteLine("Ingrese dale el dato k:");
//                            k = int.Parse(Console.ReadLine());
//                            Console.WriteLine(HacerPrimerCalculo(k));
//                            Console.ReadKey();
//                            break;
//                        }
//                    case 2:
//                        {
//                            Console.WriteLine("Vamos resolver esta función cuadratica");
//                            Console.WriteLine("Recuerde que su forma es: ax^2 + bx + c  = 0");
//                            CalcularRaices();

//                            break;
//                        }
//                    case 3:
//                        {
//                            DeterminarPosicion();
//                            break;
//                        }
//                    default:
//                        {
//                            if (tipo == 4) Console.WriteLine("Usted decidió salir");
//                            else
//                            {
//                                Console.WriteLine("Seleccionó una opción incorrecta. \nElija nuevamente ");
//                            }
//                            Console.ReadKey();
//                            Console.Clear();
//                            break;
//                        }
//                }
//                Console.WriteLine("Presione una tecla para continuar");
//                Console.ReadLine();            
//                Console.Clear();
//            } while (tipo != 4);


//        }


//        static double HacerPrimerCalculo(int num)
//        {
//            double termino = 0, total = 0;
//            for (int i = 0; i < num+1; i++)
//            {
//                termino = (i - 1) / (Factorial(i));
//                total += termino;
//                Console.WriteLine($"El Sub valor a retornar es {total}");
//            }
//            Console.WriteLine($"El valor a retornar es {total}");
//            return total;
//        }
//        static int Factorial(int num)
//        {
//            if (num == 0) return 1;
//            else if (num == 1) return 1;
//            else
//            {
//                int factorial = 1;
//                for (int i = 1; i < num; i++)
//                {
//                    factorial *= i;
//                }
//                return factorial;
//            }
//        }
//        static void CalcularRaices()
//        {
//            double a, b, c, d = 0, x1 = 0, x2 = 0;
//            Console.WriteLine("Ingrese el valor del coeficiente a");
//            a = Convert.ToDouble(Console.ReadLine());
//            if (a == 0)
//            {
//                Console.WriteLine("Esta no es una función cuadratica");
//                Console.ReadKey();
//            }
//            else
//                Console.WriteLine("Ingrese el valor del coeficiente b");
//            b = Convert.ToDouble(Console.ReadLine());
//            Console.WriteLine("Ingrese el valor del coeficiente c");
//            c = Convert.ToDouble(Console.ReadLine());
//            d = b * b - 4 * a * c; //Se utiliza acá el discriminante porque antes no tendría valores para hacer el cálculo
//            if (d < 0) Console.WriteLine("La ecuación no tiene solución real.");
//            else if (b == 0 && c == 0) Console.WriteLine($"B=0 y C=0 por lo tanto la ecuación tiene una única solución x = 0.");
//            else if (b == 0)
//            {
//                x1 = Math.Sqrt(-c / a);
//                Console.WriteLine("B=0 por lo tanto se utilizará la formula ±√(-c / a) para resolver esta ecuación, dado que b=0");
//                Console.WriteLine($"La ecuación tiene dos soluciones: x1 = {x1} y x2 = {-x1}");
//            }
//            else if (c == 0)
//            {
//                x1 = 0;
//                x2 = -b / a;
//                Console.WriteLine("C=0 por lo tanto se utilizará la formula x(x+b) por lo tanto x1=0 y x2=-b/a");
//                Console.WriteLine($"La ecuación tiene dos soluciones: x1 = {x1} y x2 = {x2}");
//            }
//            else
//            {
//                x1 = (-b + Math.Sqrt(d)) / (2 * a);
//                x2 = (-b - Math.Sqrt(d)) / (2 * a);
//                Console.WriteLine($"La ecuación tiene dos soluciones: x1 = {x1} y x2 = {x2}");
//            }
//            Console.ReadKey(); //evita que una vez que se muestren los resultados se cierre la consola
//        }

//            static double CalcularDistancia(double x1, double x2, double p1, double p2)
//            {
//                double distancia = Math.Sqrt(Math.Pow(p1 - x1, 2) + Math.Pow(p2 - x2, 2));
//                return distancia;
//            }

//            static void DeterminarPosicion()
//            {
//                Console.WriteLine("Ingrese la coordenada x del centro del círculo: ");
//                double x1 = double.Parse(Console.ReadLine());

//                Console.WriteLine("Ingrese la coordenada y del centro del círculo: ");
//                double x2 = double.Parse(Console.ReadLine());

//                Console.WriteLine("Ingrese el radio del círculo: ");
//                double radio = double.Parse(Console.ReadLine());

//                Console.WriteLine("Ingrese la coordenada x del punto P: ");
//                double p1 = double.Parse(Console.ReadLine());

//                Console.WriteLine("Ingrese la coordenada y del punto P: ");
//                double p2 = double.Parse(Console.ReadLine());

//                double distancia = CalcularDistancia(x1, x2, p1, p2);

//                if (distancia <= radio)
//                {
//                    Console.WriteLine("El punto P está dentro del círculo.");
//                }
//                else
//                {
//                    Console.WriteLine("El punto P está fuera del círculo.");
//                }





//        }
//    }

//}

#endregion
#region Ejercicio N°10 05/06/2023
//10) Determinar cuántas veces aparece la subcadena X en un texto.

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace ConsoleApp1
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            string palabra;
//            Console.WriteLine("Ingrese una palabra para contar la cantidad de veces que aparece la letra x");
//            palabra = Console.ReadLine();
//            Console.WriteLine(ContarX(palabra));
//            Console.ReadKey();
//        }
//        static string ContarX(string texto)
//        {
//            int x = 0;
//            for (int i = 0; i < texto.Length; i++)
//            {
//                if (texto[i] == 'x') x++;
//            }
//            return $" Se ingresó {x} veces la letra x";
//        }
//    }

//}
#endregion

#region Ejercicio N°11 06/06/2023
//11) De un conjunto de palabras que ingresan por teclado (“***” fin de datos), seleccionar
//Introducción a la programación
//la que contenga mayor cantidad de vocales y mostrarla cambiando mayúsculas por
//minúsculas y viceversa. Desarrollar y utilizar métodos para:
//a) Calcular la cantidad de vocales (minúsculas o mayúsculas) de una cadena.
//b) Modificar un texto que contiene letras cambiando mayúsculas por minúsculas
//y viceversa.

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace ConsoleApp1
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            string texto = "";
//            do
//            {
//                Console.WriteLine("Ingrese una palabra para para comenzar a contar las vocales o consonantes");
//                Console.WriteLine("Ingrese *** para salir");

//                texto = Console.ReadLine();
//                Console.WriteLine($"Usted ingresó {ContarVocales(texto)} vocales");
//                Console.WriteLine($"Usted ingresó {ContarConsonantes(texto)} consonantes");
//                Console.WriteLine($"El nuevo texto es: {ConvertirTexto(texto)}");
//                Console.ReadKey();

//            } while (texto != "***");
//            Console.WriteLine("Usted salió del programa");
//        }
//        static int ContarVocales(string texto)
//        {
//            int vocal = 0;
//            texto = texto.ToLower();
//            for (int i = 0; i < texto.Length; i++)
//            {
//                if (texto[i] == 'a' || texto[i] == 'e' || texto[i] == 'i' || texto[i] == 'o' || texto[i] == 'u') vocal++;
//            }
//            return vocal;
//        }
//        static int ContarConsonantes(string texto)
//        {
//            int consonantes = 0;
//            texto = texto.ToLower();
//            for (int i = 0; i < texto.Length; i++)
//            {
//                if (Char.IsLetter(texto[i]) && (texto[i] != 'a' || texto[i] != 'e' || texto[i] != 'i' || texto[i] != 'o' || texto[i] != 'u')) consonantes++;
//            }
//            return consonantes;
//        }
//        static string ConvertirTexto(string texto)
//        {
//            string nuevoTexto = "";
//            for (int i = 0; i < texto.Length; i++)
//            {
//                if (Char.IsLower(texto[i])) nuevoTexto += Char.ToUpper(texto[i]);
//                else nuevoTexto += Char.ToLower(texto[i]);
//            }
//            return nuevoTexto;
//        }
//    }
//}
#endregion

#region Ejercicio N°12 06/06/2023
//12) Leer N cadenas, informar: cuántas fueron capaces y la concatenación de los digitos
//contenidos en ellas. Desarrollar y utilizar funciones que permitan:
//a) Determinar si una cadena es capicua.
//b) Recorrer un texto formando un número con los caracteres que son dígitos.
//Ejemplo: “E * 3v - 98fT ? 5” → 3985(0 si no tiene dígitos).

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace ConsoleApp1
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            string texto = "";
//            int cantidad = 1;

//            Console.WriteLine("Ingrese la cantidad de cadenas que desea ingresar");
//            cantidad = int.Parse(Console.ReadLine());
//            for (int i=0; i < cantidad; i++) { 
//            Console.WriteLine("Ingrese su cadena");
//            texto = Console.ReadLine();
//            Console.WriteLine($"La cadena {VerificarCapicues(texto)} es capicua");
//            Console.WriteLine($"El número de la cadena es {JuntarNumeros(texto)}");
//            } 
//            Console.WriteLine("Usted salió del programa");
//            Console.ReadKey();
//        }
//        static string VerificarCapicues(string texto)
//        {
//            string nuevoTexto = "", textoOriginal="";
//            texto = texto.ToLower().Trim();
//            for (int i = texto.Length-1; i>=0; i--)
//            {
//                if (texto[i] != ' ') nuevoTexto += Char.ToLower(texto[i]);
//            }
//            for (int i = 0; i < texto.Length; i++)
//            {
//                if (texto[i] != ' ') textoOriginal += Char.ToLower(texto[i]);
//            }
//            if (texto == "") return "esta vacía, no se puede evaluar si";
//            else if (textoOriginal == nuevoTexto) return "SI";
//            else return "NO";
//        }
//        static string JuntarNumeros(string texto)
//        {
//            string numero = "";
//            for (int i = 0; i < texto.Length; i++)
//            {
//                if (Char.IsNumber(texto[i])) numero += (texto[i]);
//            }
//            if (numero == "") return "0";
//            else return numero;
//        }

//    }
//}
#endregion
//13) Escribir un método que a partir de un carácter devuelve un código numérico, según:
//1 si es una letra
//2 si es un dígito
//3 si es paréntesis o corchete
//4 si es blanco
//0 si no es ninguno de los anteriores
//Utilizando el método anterior, desarrollar un procedimiento que transforma una cadena de
//caracteres (parámetro) en la cadena formada por los códigos correspondientes. Cómo la
//función devuelve valores enteros, estos deben ser convertidos a caracteres para ser
//reemplazado en la cadena.
//Ejemplo “9 (k]-A” → “2431301”
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace ConsoleApp1
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            char caracter = ' ';

//            Console.WriteLine("Ingrese un carácter");
//            caracter = Console.ReadKey().KeyChar;
//            Console.WriteLine();
//            Console.WriteLine($"El carácter devuelve como resultado: {DevolverCodigo(caracter)}");

//            Console.WriteLine("Usted salió del programa");
//            Console.ReadKey();
//        }
//        static char DevolverCodigo(char caracter)
//        {
//            if (Char.IsLetter(caracter)) return '1';
//            else if (Char.IsNumber(caracter)) return '2';
//            else if (caracter == '(' || caracter == ')' || caracter == '[' || caracter == ']') return '3';
//            else if (Char.IsWhiteSpace(caracter)) return '4';
//            else return '0';
//        }

//    }
//}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            string cadena = "";

            Console.WriteLine("Ingrese una cadena");
            cadena = Console.ReadLine();
            Console.WriteLine();
            Console.WriteLine($"La cadena codificada es: {DevolverCodigoCadena(cadena)}");

            Console.WriteLine("Usted salió del programa");
            Console.ReadKey();
        }
        static string DevolverCodigoCadena(string cadena)
        {
            string codigo = "";
            for (int i = 0; i<cadena.Length; i++)
            {
                codigo += DevolverCodigoCaracter(Convert.ToChar(cadena[i]));
            }
            return codigo;
        }
        static char DevolverCodigoCaracter(char caracter)
        {
            if (Char.IsLetter(caracter)) return '1';
            else if (Char.IsNumber(caracter)) return '2';
            else if (caracter == '(' || caracter == ')' || caracter == '[' || caracter == ']') return '3';
            else if (Char.IsWhiteSpace(caracter)) return '4';
            else return '0';
        }

    }
}

#endregion

